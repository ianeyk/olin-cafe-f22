`timescale 1ns/1ps
`default_nettype none
`include "./adder1.sv"

module adder255(a, b, cin, s, cout);

    input [254:0] a, b;
    input cin;
    output logic [254:0] s; // output (sum)
    output logic cout; // output carry bit
    
    // AUTO-GENERATED COMBINATIONAL LOGIC
    logic c0;
    adder1 bit0(.a(a[0]), .b(b[0]), .cin(cin), .s(s[0]), .cout(c0));
    logic c1;
    adder1 bit1(.a(a[1]), .b(b[1]), .cin(c0), .s(s[1]), .cout(c1));
    logic c2;
    adder1 bit2(.a(a[2]), .b(b[2]), .cin(c1), .s(s[2]), .cout(c2));
    logic c3;
    adder1 bit3(.a(a[3]), .b(b[3]), .cin(c2), .s(s[3]), .cout(c3));
    logic c4;
    adder1 bit4(.a(a[4]), .b(b[4]), .cin(c3), .s(s[4]), .cout(c4));
    logic c5;
    adder1 bit5(.a(a[5]), .b(b[5]), .cin(c4), .s(s[5]), .cout(c5));
    logic c6;
    adder1 bit6(.a(a[6]), .b(b[6]), .cin(c5), .s(s[6]), .cout(c6));
    logic c7;
    adder1 bit7(.a(a[7]), .b(b[7]), .cin(c6), .s(s[7]), .cout(c7));
    logic c8;
    adder1 bit8(.a(a[8]), .b(b[8]), .cin(c7), .s(s[8]), .cout(c8));
    logic c9;
    adder1 bit9(.a(a[9]), .b(b[9]), .cin(c8), .s(s[9]), .cout(c9));
    logic c10;
    adder1 bit10(.a(a[10]), .b(b[10]), .cin(c9), .s(s[10]), .cout(c10));
    logic c11;
    adder1 bit11(.a(a[11]), .b(b[11]), .cin(c10), .s(s[11]), .cout(c11));
    logic c12;
    adder1 bit12(.a(a[12]), .b(b[12]), .cin(c11), .s(s[12]), .cout(c12));
    logic c13;
    adder1 bit13(.a(a[13]), .b(b[13]), .cin(c12), .s(s[13]), .cout(c13));
    logic c14;
    adder1 bit14(.a(a[14]), .b(b[14]), .cin(c13), .s(s[14]), .cout(c14));
    logic c15;
    adder1 bit15(.a(a[15]), .b(b[15]), .cin(c14), .s(s[15]), .cout(c15));
    logic c16;
    adder1 bit16(.a(a[16]), .b(b[16]), .cin(c15), .s(s[16]), .cout(c16));
    logic c17;
    adder1 bit17(.a(a[17]), .b(b[17]), .cin(c16), .s(s[17]), .cout(c17));
    logic c18;
    adder1 bit18(.a(a[18]), .b(b[18]), .cin(c17), .s(s[18]), .cout(c18));
    logic c19;
    adder1 bit19(.a(a[19]), .b(b[19]), .cin(c18), .s(s[19]), .cout(c19));
    logic c20;
    adder1 bit20(.a(a[20]), .b(b[20]), .cin(c19), .s(s[20]), .cout(c20));
    logic c21;
    adder1 bit21(.a(a[21]), .b(b[21]), .cin(c20), .s(s[21]), .cout(c21));
    logic c22;
    adder1 bit22(.a(a[22]), .b(b[22]), .cin(c21), .s(s[22]), .cout(c22));
    logic c23;
    adder1 bit23(.a(a[23]), .b(b[23]), .cin(c22), .s(s[23]), .cout(c23));
    logic c24;
    adder1 bit24(.a(a[24]), .b(b[24]), .cin(c23), .s(s[24]), .cout(c24));
    logic c25;
    adder1 bit25(.a(a[25]), .b(b[25]), .cin(c24), .s(s[25]), .cout(c25));
    logic c26;
    adder1 bit26(.a(a[26]), .b(b[26]), .cin(c25), .s(s[26]), .cout(c26));
    logic c27;
    adder1 bit27(.a(a[27]), .b(b[27]), .cin(c26), .s(s[27]), .cout(c27));
    logic c28;
    adder1 bit28(.a(a[28]), .b(b[28]), .cin(c27), .s(s[28]), .cout(c28));
    logic c29;
    adder1 bit29(.a(a[29]), .b(b[29]), .cin(c28), .s(s[29]), .cout(c29));
    logic c30;
    adder1 bit30(.a(a[30]), .b(b[30]), .cin(c29), .s(s[30]), .cout(c30));
    logic c31;
    adder1 bit31(.a(a[31]), .b(b[31]), .cin(c30), .s(s[31]), .cout(c31));
    logic c32;
    adder1 bit32(.a(a[32]), .b(b[32]), .cin(c31), .s(s[32]), .cout(c32));
    logic c33;
    adder1 bit33(.a(a[33]), .b(b[33]), .cin(c32), .s(s[33]), .cout(c33));
    logic c34;
    adder1 bit34(.a(a[34]), .b(b[34]), .cin(c33), .s(s[34]), .cout(c34));
    logic c35;
    adder1 bit35(.a(a[35]), .b(b[35]), .cin(c34), .s(s[35]), .cout(c35));
    logic c36;
    adder1 bit36(.a(a[36]), .b(b[36]), .cin(c35), .s(s[36]), .cout(c36));
    logic c37;
    adder1 bit37(.a(a[37]), .b(b[37]), .cin(c36), .s(s[37]), .cout(c37));
    logic c38;
    adder1 bit38(.a(a[38]), .b(b[38]), .cin(c37), .s(s[38]), .cout(c38));
    logic c39;
    adder1 bit39(.a(a[39]), .b(b[39]), .cin(c38), .s(s[39]), .cout(c39));
    logic c40;
    adder1 bit40(.a(a[40]), .b(b[40]), .cin(c39), .s(s[40]), .cout(c40));
    logic c41;
    adder1 bit41(.a(a[41]), .b(b[41]), .cin(c40), .s(s[41]), .cout(c41));
    logic c42;
    adder1 bit42(.a(a[42]), .b(b[42]), .cin(c41), .s(s[42]), .cout(c42));
    logic c43;
    adder1 bit43(.a(a[43]), .b(b[43]), .cin(c42), .s(s[43]), .cout(c43));
    logic c44;
    adder1 bit44(.a(a[44]), .b(b[44]), .cin(c43), .s(s[44]), .cout(c44));
    logic c45;
    adder1 bit45(.a(a[45]), .b(b[45]), .cin(c44), .s(s[45]), .cout(c45));
    logic c46;
    adder1 bit46(.a(a[46]), .b(b[46]), .cin(c45), .s(s[46]), .cout(c46));
    logic c47;
    adder1 bit47(.a(a[47]), .b(b[47]), .cin(c46), .s(s[47]), .cout(c47));
    logic c48;
    adder1 bit48(.a(a[48]), .b(b[48]), .cin(c47), .s(s[48]), .cout(c48));
    logic c49;
    adder1 bit49(.a(a[49]), .b(b[49]), .cin(c48), .s(s[49]), .cout(c49));
    logic c50;
    adder1 bit50(.a(a[50]), .b(b[50]), .cin(c49), .s(s[50]), .cout(c50));
    logic c51;
    adder1 bit51(.a(a[51]), .b(b[51]), .cin(c50), .s(s[51]), .cout(c51));
    logic c52;
    adder1 bit52(.a(a[52]), .b(b[52]), .cin(c51), .s(s[52]), .cout(c52));
    logic c53;
    adder1 bit53(.a(a[53]), .b(b[53]), .cin(c52), .s(s[53]), .cout(c53));
    logic c54;
    adder1 bit54(.a(a[54]), .b(b[54]), .cin(c53), .s(s[54]), .cout(c54));
    logic c55;
    adder1 bit55(.a(a[55]), .b(b[55]), .cin(c54), .s(s[55]), .cout(c55));
    logic c56;
    adder1 bit56(.a(a[56]), .b(b[56]), .cin(c55), .s(s[56]), .cout(c56));
    logic c57;
    adder1 bit57(.a(a[57]), .b(b[57]), .cin(c56), .s(s[57]), .cout(c57));
    logic c58;
    adder1 bit58(.a(a[58]), .b(b[58]), .cin(c57), .s(s[58]), .cout(c58));
    logic c59;
    adder1 bit59(.a(a[59]), .b(b[59]), .cin(c58), .s(s[59]), .cout(c59));
    logic c60;
    adder1 bit60(.a(a[60]), .b(b[60]), .cin(c59), .s(s[60]), .cout(c60));
    logic c61;
    adder1 bit61(.a(a[61]), .b(b[61]), .cin(c60), .s(s[61]), .cout(c61));
    logic c62;
    adder1 bit62(.a(a[62]), .b(b[62]), .cin(c61), .s(s[62]), .cout(c62));
    logic c63;
    adder1 bit63(.a(a[63]), .b(b[63]), .cin(c62), .s(s[63]), .cout(c63));
    logic c64;
    adder1 bit64(.a(a[64]), .b(b[64]), .cin(c63), .s(s[64]), .cout(c64));
    logic c65;
    adder1 bit65(.a(a[65]), .b(b[65]), .cin(c64), .s(s[65]), .cout(c65));
    logic c66;
    adder1 bit66(.a(a[66]), .b(b[66]), .cin(c65), .s(s[66]), .cout(c66));
    logic c67;
    adder1 bit67(.a(a[67]), .b(b[67]), .cin(c66), .s(s[67]), .cout(c67));
    logic c68;
    adder1 bit68(.a(a[68]), .b(b[68]), .cin(c67), .s(s[68]), .cout(c68));
    logic c69;
    adder1 bit69(.a(a[69]), .b(b[69]), .cin(c68), .s(s[69]), .cout(c69));
    logic c70;
    adder1 bit70(.a(a[70]), .b(b[70]), .cin(c69), .s(s[70]), .cout(c70));
    logic c71;
    adder1 bit71(.a(a[71]), .b(b[71]), .cin(c70), .s(s[71]), .cout(c71));
    logic c72;
    adder1 bit72(.a(a[72]), .b(b[72]), .cin(c71), .s(s[72]), .cout(c72));
    logic c73;
    adder1 bit73(.a(a[73]), .b(b[73]), .cin(c72), .s(s[73]), .cout(c73));
    logic c74;
    adder1 bit74(.a(a[74]), .b(b[74]), .cin(c73), .s(s[74]), .cout(c74));
    logic c75;
    adder1 bit75(.a(a[75]), .b(b[75]), .cin(c74), .s(s[75]), .cout(c75));
    logic c76;
    adder1 bit76(.a(a[76]), .b(b[76]), .cin(c75), .s(s[76]), .cout(c76));
    logic c77;
    adder1 bit77(.a(a[77]), .b(b[77]), .cin(c76), .s(s[77]), .cout(c77));
    logic c78;
    adder1 bit78(.a(a[78]), .b(b[78]), .cin(c77), .s(s[78]), .cout(c78));
    logic c79;
    adder1 bit79(.a(a[79]), .b(b[79]), .cin(c78), .s(s[79]), .cout(c79));
    logic c80;
    adder1 bit80(.a(a[80]), .b(b[80]), .cin(c79), .s(s[80]), .cout(c80));
    logic c81;
    adder1 bit81(.a(a[81]), .b(b[81]), .cin(c80), .s(s[81]), .cout(c81));
    logic c82;
    adder1 bit82(.a(a[82]), .b(b[82]), .cin(c81), .s(s[82]), .cout(c82));
    logic c83;
    adder1 bit83(.a(a[83]), .b(b[83]), .cin(c82), .s(s[83]), .cout(c83));
    logic c84;
    adder1 bit84(.a(a[84]), .b(b[84]), .cin(c83), .s(s[84]), .cout(c84));
    logic c85;
    adder1 bit85(.a(a[85]), .b(b[85]), .cin(c84), .s(s[85]), .cout(c85));
    logic c86;
    adder1 bit86(.a(a[86]), .b(b[86]), .cin(c85), .s(s[86]), .cout(c86));
    logic c87;
    adder1 bit87(.a(a[87]), .b(b[87]), .cin(c86), .s(s[87]), .cout(c87));
    logic c88;
    adder1 bit88(.a(a[88]), .b(b[88]), .cin(c87), .s(s[88]), .cout(c88));
    logic c89;
    adder1 bit89(.a(a[89]), .b(b[89]), .cin(c88), .s(s[89]), .cout(c89));
    logic c90;
    adder1 bit90(.a(a[90]), .b(b[90]), .cin(c89), .s(s[90]), .cout(c90));
    logic c91;
    adder1 bit91(.a(a[91]), .b(b[91]), .cin(c90), .s(s[91]), .cout(c91));
    logic c92;
    adder1 bit92(.a(a[92]), .b(b[92]), .cin(c91), .s(s[92]), .cout(c92));
    logic c93;
    adder1 bit93(.a(a[93]), .b(b[93]), .cin(c92), .s(s[93]), .cout(c93));
    logic c94;
    adder1 bit94(.a(a[94]), .b(b[94]), .cin(c93), .s(s[94]), .cout(c94));
    logic c95;
    adder1 bit95(.a(a[95]), .b(b[95]), .cin(c94), .s(s[95]), .cout(c95));
    logic c96;
    adder1 bit96(.a(a[96]), .b(b[96]), .cin(c95), .s(s[96]), .cout(c96));
    logic c97;
    adder1 bit97(.a(a[97]), .b(b[97]), .cin(c96), .s(s[97]), .cout(c97));
    logic c98;
    adder1 bit98(.a(a[98]), .b(b[98]), .cin(c97), .s(s[98]), .cout(c98));
    logic c99;
    adder1 bit99(.a(a[99]), .b(b[99]), .cin(c98), .s(s[99]), .cout(c99));
    logic c100;
    adder1 bit100(.a(a[100]), .b(b[100]), .cin(c99), .s(s[100]), .cout(c100));
    logic c101;
    adder1 bit101(.a(a[101]), .b(b[101]), .cin(c100), .s(s[101]), .cout(c101));
    logic c102;
    adder1 bit102(.a(a[102]), .b(b[102]), .cin(c101), .s(s[102]), .cout(c102));
    logic c103;
    adder1 bit103(.a(a[103]), .b(b[103]), .cin(c102), .s(s[103]), .cout(c103));
    logic c104;
    adder1 bit104(.a(a[104]), .b(b[104]), .cin(c103), .s(s[104]), .cout(c104));
    logic c105;
    adder1 bit105(.a(a[105]), .b(b[105]), .cin(c104), .s(s[105]), .cout(c105));
    logic c106;
    adder1 bit106(.a(a[106]), .b(b[106]), .cin(c105), .s(s[106]), .cout(c106));
    logic c107;
    adder1 bit107(.a(a[107]), .b(b[107]), .cin(c106), .s(s[107]), .cout(c107));
    logic c108;
    adder1 bit108(.a(a[108]), .b(b[108]), .cin(c107), .s(s[108]), .cout(c108));
    logic c109;
    adder1 bit109(.a(a[109]), .b(b[109]), .cin(c108), .s(s[109]), .cout(c109));
    logic c110;
    adder1 bit110(.a(a[110]), .b(b[110]), .cin(c109), .s(s[110]), .cout(c110));
    logic c111;
    adder1 bit111(.a(a[111]), .b(b[111]), .cin(c110), .s(s[111]), .cout(c111));
    logic c112;
    adder1 bit112(.a(a[112]), .b(b[112]), .cin(c111), .s(s[112]), .cout(c112));
    logic c113;
    adder1 bit113(.a(a[113]), .b(b[113]), .cin(c112), .s(s[113]), .cout(c113));
    logic c114;
    adder1 bit114(.a(a[114]), .b(b[114]), .cin(c113), .s(s[114]), .cout(c114));
    logic c115;
    adder1 bit115(.a(a[115]), .b(b[115]), .cin(c114), .s(s[115]), .cout(c115));
    logic c116;
    adder1 bit116(.a(a[116]), .b(b[116]), .cin(c115), .s(s[116]), .cout(c116));
    logic c117;
    adder1 bit117(.a(a[117]), .b(b[117]), .cin(c116), .s(s[117]), .cout(c117));
    logic c118;
    adder1 bit118(.a(a[118]), .b(b[118]), .cin(c117), .s(s[118]), .cout(c118));
    logic c119;
    adder1 bit119(.a(a[119]), .b(b[119]), .cin(c118), .s(s[119]), .cout(c119));
    logic c120;
    adder1 bit120(.a(a[120]), .b(b[120]), .cin(c119), .s(s[120]), .cout(c120));
    logic c121;
    adder1 bit121(.a(a[121]), .b(b[121]), .cin(c120), .s(s[121]), .cout(c121));
    logic c122;
    adder1 bit122(.a(a[122]), .b(b[122]), .cin(c121), .s(s[122]), .cout(c122));
    logic c123;
    adder1 bit123(.a(a[123]), .b(b[123]), .cin(c122), .s(s[123]), .cout(c123));
    logic c124;
    adder1 bit124(.a(a[124]), .b(b[124]), .cin(c123), .s(s[124]), .cout(c124));
    logic c125;
    adder1 bit125(.a(a[125]), .b(b[125]), .cin(c124), .s(s[125]), .cout(c125));
    logic c126;
    adder1 bit126(.a(a[126]), .b(b[126]), .cin(c125), .s(s[126]), .cout(c126));
    logic c127;
    adder1 bit127(.a(a[127]), .b(b[127]), .cin(c126), .s(s[127]), .cout(c127));
    logic c128;
    adder1 bit128(.a(a[128]), .b(b[128]), .cin(c127), .s(s[128]), .cout(c128));
    logic c129;
    adder1 bit129(.a(a[129]), .b(b[129]), .cin(c128), .s(s[129]), .cout(c129));
    logic c130;
    adder1 bit130(.a(a[130]), .b(b[130]), .cin(c129), .s(s[130]), .cout(c130));
    logic c131;
    adder1 bit131(.a(a[131]), .b(b[131]), .cin(c130), .s(s[131]), .cout(c131));
    logic c132;
    adder1 bit132(.a(a[132]), .b(b[132]), .cin(c131), .s(s[132]), .cout(c132));
    logic c133;
    adder1 bit133(.a(a[133]), .b(b[133]), .cin(c132), .s(s[133]), .cout(c133));
    logic c134;
    adder1 bit134(.a(a[134]), .b(b[134]), .cin(c133), .s(s[134]), .cout(c134));
    logic c135;
    adder1 bit135(.a(a[135]), .b(b[135]), .cin(c134), .s(s[135]), .cout(c135));
    logic c136;
    adder1 bit136(.a(a[136]), .b(b[136]), .cin(c135), .s(s[136]), .cout(c136));
    logic c137;
    adder1 bit137(.a(a[137]), .b(b[137]), .cin(c136), .s(s[137]), .cout(c137));
    logic c138;
    adder1 bit138(.a(a[138]), .b(b[138]), .cin(c137), .s(s[138]), .cout(c138));
    logic c139;
    adder1 bit139(.a(a[139]), .b(b[139]), .cin(c138), .s(s[139]), .cout(c139));
    logic c140;
    adder1 bit140(.a(a[140]), .b(b[140]), .cin(c139), .s(s[140]), .cout(c140));
    logic c141;
    adder1 bit141(.a(a[141]), .b(b[141]), .cin(c140), .s(s[141]), .cout(c141));
    logic c142;
    adder1 bit142(.a(a[142]), .b(b[142]), .cin(c141), .s(s[142]), .cout(c142));
    logic c143;
    adder1 bit143(.a(a[143]), .b(b[143]), .cin(c142), .s(s[143]), .cout(c143));
    logic c144;
    adder1 bit144(.a(a[144]), .b(b[144]), .cin(c143), .s(s[144]), .cout(c144));
    logic c145;
    adder1 bit145(.a(a[145]), .b(b[145]), .cin(c144), .s(s[145]), .cout(c145));
    logic c146;
    adder1 bit146(.a(a[146]), .b(b[146]), .cin(c145), .s(s[146]), .cout(c146));
    logic c147;
    adder1 bit147(.a(a[147]), .b(b[147]), .cin(c146), .s(s[147]), .cout(c147));
    logic c148;
    adder1 bit148(.a(a[148]), .b(b[148]), .cin(c147), .s(s[148]), .cout(c148));
    logic c149;
    adder1 bit149(.a(a[149]), .b(b[149]), .cin(c148), .s(s[149]), .cout(c149));
    logic c150;
    adder1 bit150(.a(a[150]), .b(b[150]), .cin(c149), .s(s[150]), .cout(c150));
    logic c151;
    adder1 bit151(.a(a[151]), .b(b[151]), .cin(c150), .s(s[151]), .cout(c151));
    logic c152;
    adder1 bit152(.a(a[152]), .b(b[152]), .cin(c151), .s(s[152]), .cout(c152));
    logic c153;
    adder1 bit153(.a(a[153]), .b(b[153]), .cin(c152), .s(s[153]), .cout(c153));
    logic c154;
    adder1 bit154(.a(a[154]), .b(b[154]), .cin(c153), .s(s[154]), .cout(c154));
    logic c155;
    adder1 bit155(.a(a[155]), .b(b[155]), .cin(c154), .s(s[155]), .cout(c155));
    logic c156;
    adder1 bit156(.a(a[156]), .b(b[156]), .cin(c155), .s(s[156]), .cout(c156));
    logic c157;
    adder1 bit157(.a(a[157]), .b(b[157]), .cin(c156), .s(s[157]), .cout(c157));
    logic c158;
    adder1 bit158(.a(a[158]), .b(b[158]), .cin(c157), .s(s[158]), .cout(c158));
    logic c159;
    adder1 bit159(.a(a[159]), .b(b[159]), .cin(c158), .s(s[159]), .cout(c159));
    logic c160;
    adder1 bit160(.a(a[160]), .b(b[160]), .cin(c159), .s(s[160]), .cout(c160));
    logic c161;
    adder1 bit161(.a(a[161]), .b(b[161]), .cin(c160), .s(s[161]), .cout(c161));
    logic c162;
    adder1 bit162(.a(a[162]), .b(b[162]), .cin(c161), .s(s[162]), .cout(c162));
    logic c163;
    adder1 bit163(.a(a[163]), .b(b[163]), .cin(c162), .s(s[163]), .cout(c163));
    logic c164;
    adder1 bit164(.a(a[164]), .b(b[164]), .cin(c163), .s(s[164]), .cout(c164));
    logic c165;
    adder1 bit165(.a(a[165]), .b(b[165]), .cin(c164), .s(s[165]), .cout(c165));
    logic c166;
    adder1 bit166(.a(a[166]), .b(b[166]), .cin(c165), .s(s[166]), .cout(c166));
    logic c167;
    adder1 bit167(.a(a[167]), .b(b[167]), .cin(c166), .s(s[167]), .cout(c167));
    logic c168;
    adder1 bit168(.a(a[168]), .b(b[168]), .cin(c167), .s(s[168]), .cout(c168));
    logic c169;
    adder1 bit169(.a(a[169]), .b(b[169]), .cin(c168), .s(s[169]), .cout(c169));
    logic c170;
    adder1 bit170(.a(a[170]), .b(b[170]), .cin(c169), .s(s[170]), .cout(c170));
    logic c171;
    adder1 bit171(.a(a[171]), .b(b[171]), .cin(c170), .s(s[171]), .cout(c171));
    logic c172;
    adder1 bit172(.a(a[172]), .b(b[172]), .cin(c171), .s(s[172]), .cout(c172));
    logic c173;
    adder1 bit173(.a(a[173]), .b(b[173]), .cin(c172), .s(s[173]), .cout(c173));
    logic c174;
    adder1 bit174(.a(a[174]), .b(b[174]), .cin(c173), .s(s[174]), .cout(c174));
    logic c175;
    adder1 bit175(.a(a[175]), .b(b[175]), .cin(c174), .s(s[175]), .cout(c175));
    logic c176;
    adder1 bit176(.a(a[176]), .b(b[176]), .cin(c175), .s(s[176]), .cout(c176));
    logic c177;
    adder1 bit177(.a(a[177]), .b(b[177]), .cin(c176), .s(s[177]), .cout(c177));
    logic c178;
    adder1 bit178(.a(a[178]), .b(b[178]), .cin(c177), .s(s[178]), .cout(c178));
    logic c179;
    adder1 bit179(.a(a[179]), .b(b[179]), .cin(c178), .s(s[179]), .cout(c179));
    logic c180;
    adder1 bit180(.a(a[180]), .b(b[180]), .cin(c179), .s(s[180]), .cout(c180));
    logic c181;
    adder1 bit181(.a(a[181]), .b(b[181]), .cin(c180), .s(s[181]), .cout(c181));
    logic c182;
    adder1 bit182(.a(a[182]), .b(b[182]), .cin(c181), .s(s[182]), .cout(c182));
    logic c183;
    adder1 bit183(.a(a[183]), .b(b[183]), .cin(c182), .s(s[183]), .cout(c183));
    logic c184;
    adder1 bit184(.a(a[184]), .b(b[184]), .cin(c183), .s(s[184]), .cout(c184));
    logic c185;
    adder1 bit185(.a(a[185]), .b(b[185]), .cin(c184), .s(s[185]), .cout(c185));
    logic c186;
    adder1 bit186(.a(a[186]), .b(b[186]), .cin(c185), .s(s[186]), .cout(c186));
    logic c187;
    adder1 bit187(.a(a[187]), .b(b[187]), .cin(c186), .s(s[187]), .cout(c187));
    logic c188;
    adder1 bit188(.a(a[188]), .b(b[188]), .cin(c187), .s(s[188]), .cout(c188));
    logic c189;
    adder1 bit189(.a(a[189]), .b(b[189]), .cin(c188), .s(s[189]), .cout(c189));
    logic c190;
    adder1 bit190(.a(a[190]), .b(b[190]), .cin(c189), .s(s[190]), .cout(c190));
    logic c191;
    adder1 bit191(.a(a[191]), .b(b[191]), .cin(c190), .s(s[191]), .cout(c191));
    logic c192;
    adder1 bit192(.a(a[192]), .b(b[192]), .cin(c191), .s(s[192]), .cout(c192));
    logic c193;
    adder1 bit193(.a(a[193]), .b(b[193]), .cin(c192), .s(s[193]), .cout(c193));
    logic c194;
    adder1 bit194(.a(a[194]), .b(b[194]), .cin(c193), .s(s[194]), .cout(c194));
    logic c195;
    adder1 bit195(.a(a[195]), .b(b[195]), .cin(c194), .s(s[195]), .cout(c195));
    logic c196;
    adder1 bit196(.a(a[196]), .b(b[196]), .cin(c195), .s(s[196]), .cout(c196));
    logic c197;
    adder1 bit197(.a(a[197]), .b(b[197]), .cin(c196), .s(s[197]), .cout(c197));
    logic c198;
    adder1 bit198(.a(a[198]), .b(b[198]), .cin(c197), .s(s[198]), .cout(c198));
    logic c199;
    adder1 bit199(.a(a[199]), .b(b[199]), .cin(c198), .s(s[199]), .cout(c199));
    logic c200;
    adder1 bit200(.a(a[200]), .b(b[200]), .cin(c199), .s(s[200]), .cout(c200));
    logic c201;
    adder1 bit201(.a(a[201]), .b(b[201]), .cin(c200), .s(s[201]), .cout(c201));
    logic c202;
    adder1 bit202(.a(a[202]), .b(b[202]), .cin(c201), .s(s[202]), .cout(c202));
    logic c203;
    adder1 bit203(.a(a[203]), .b(b[203]), .cin(c202), .s(s[203]), .cout(c203));
    logic c204;
    adder1 bit204(.a(a[204]), .b(b[204]), .cin(c203), .s(s[204]), .cout(c204));
    logic c205;
    adder1 bit205(.a(a[205]), .b(b[205]), .cin(c204), .s(s[205]), .cout(c205));
    logic c206;
    adder1 bit206(.a(a[206]), .b(b[206]), .cin(c205), .s(s[206]), .cout(c206));
    logic c207;
    adder1 bit207(.a(a[207]), .b(b[207]), .cin(c206), .s(s[207]), .cout(c207));
    logic c208;
    adder1 bit208(.a(a[208]), .b(b[208]), .cin(c207), .s(s[208]), .cout(c208));
    logic c209;
    adder1 bit209(.a(a[209]), .b(b[209]), .cin(c208), .s(s[209]), .cout(c209));
    logic c210;
    adder1 bit210(.a(a[210]), .b(b[210]), .cin(c209), .s(s[210]), .cout(c210));
    logic c211;
    adder1 bit211(.a(a[211]), .b(b[211]), .cin(c210), .s(s[211]), .cout(c211));
    logic c212;
    adder1 bit212(.a(a[212]), .b(b[212]), .cin(c211), .s(s[212]), .cout(c212));
    logic c213;
    adder1 bit213(.a(a[213]), .b(b[213]), .cin(c212), .s(s[213]), .cout(c213));
    logic c214;
    adder1 bit214(.a(a[214]), .b(b[214]), .cin(c213), .s(s[214]), .cout(c214));
    logic c215;
    adder1 bit215(.a(a[215]), .b(b[215]), .cin(c214), .s(s[215]), .cout(c215));
    logic c216;
    adder1 bit216(.a(a[216]), .b(b[216]), .cin(c215), .s(s[216]), .cout(c216));
    logic c217;
    adder1 bit217(.a(a[217]), .b(b[217]), .cin(c216), .s(s[217]), .cout(c217));
    logic c218;
    adder1 bit218(.a(a[218]), .b(b[218]), .cin(c217), .s(s[218]), .cout(c218));
    logic c219;
    adder1 bit219(.a(a[219]), .b(b[219]), .cin(c218), .s(s[219]), .cout(c219));
    logic c220;
    adder1 bit220(.a(a[220]), .b(b[220]), .cin(c219), .s(s[220]), .cout(c220));
    logic c221;
    adder1 bit221(.a(a[221]), .b(b[221]), .cin(c220), .s(s[221]), .cout(c221));
    logic c222;
    adder1 bit222(.a(a[222]), .b(b[222]), .cin(c221), .s(s[222]), .cout(c222));
    logic c223;
    adder1 bit223(.a(a[223]), .b(b[223]), .cin(c222), .s(s[223]), .cout(c223));
    logic c224;
    adder1 bit224(.a(a[224]), .b(b[224]), .cin(c223), .s(s[224]), .cout(c224));
    logic c225;
    adder1 bit225(.a(a[225]), .b(b[225]), .cin(c224), .s(s[225]), .cout(c225));
    logic c226;
    adder1 bit226(.a(a[226]), .b(b[226]), .cin(c225), .s(s[226]), .cout(c226));
    logic c227;
    adder1 bit227(.a(a[227]), .b(b[227]), .cin(c226), .s(s[227]), .cout(c227));
    logic c228;
    adder1 bit228(.a(a[228]), .b(b[228]), .cin(c227), .s(s[228]), .cout(c228));
    logic c229;
    adder1 bit229(.a(a[229]), .b(b[229]), .cin(c228), .s(s[229]), .cout(c229));
    logic c230;
    adder1 bit230(.a(a[230]), .b(b[230]), .cin(c229), .s(s[230]), .cout(c230));
    logic c231;
    adder1 bit231(.a(a[231]), .b(b[231]), .cin(c230), .s(s[231]), .cout(c231));
    logic c232;
    adder1 bit232(.a(a[232]), .b(b[232]), .cin(c231), .s(s[232]), .cout(c232));
    logic c233;
    adder1 bit233(.a(a[233]), .b(b[233]), .cin(c232), .s(s[233]), .cout(c233));
    logic c234;
    adder1 bit234(.a(a[234]), .b(b[234]), .cin(c233), .s(s[234]), .cout(c234));
    logic c235;
    adder1 bit235(.a(a[235]), .b(b[235]), .cin(c234), .s(s[235]), .cout(c235));
    logic c236;
    adder1 bit236(.a(a[236]), .b(b[236]), .cin(c235), .s(s[236]), .cout(c236));
    logic c237;
    adder1 bit237(.a(a[237]), .b(b[237]), .cin(c236), .s(s[237]), .cout(c237));
    logic c238;
    adder1 bit238(.a(a[238]), .b(b[238]), .cin(c237), .s(s[238]), .cout(c238));
    logic c239;
    adder1 bit239(.a(a[239]), .b(b[239]), .cin(c238), .s(s[239]), .cout(c239));
    logic c240;
    adder1 bit240(.a(a[240]), .b(b[240]), .cin(c239), .s(s[240]), .cout(c240));
    logic c241;
    adder1 bit241(.a(a[241]), .b(b[241]), .cin(c240), .s(s[241]), .cout(c241));
    logic c242;
    adder1 bit242(.a(a[242]), .b(b[242]), .cin(c241), .s(s[242]), .cout(c242));
    logic c243;
    adder1 bit243(.a(a[243]), .b(b[243]), .cin(c242), .s(s[243]), .cout(c243));
    logic c244;
    adder1 bit244(.a(a[244]), .b(b[244]), .cin(c243), .s(s[244]), .cout(c244));
    logic c245;
    adder1 bit245(.a(a[245]), .b(b[245]), .cin(c244), .s(s[245]), .cout(c245));
    logic c246;
    adder1 bit246(.a(a[246]), .b(b[246]), .cin(c245), .s(s[246]), .cout(c246));
    logic c247;
    adder1 bit247(.a(a[247]), .b(b[247]), .cin(c246), .s(s[247]), .cout(c247));
    logic c248;
    adder1 bit248(.a(a[248]), .b(b[248]), .cin(c247), .s(s[248]), .cout(c248));
    logic c249;
    adder1 bit249(.a(a[249]), .b(b[249]), .cin(c248), .s(s[249]), .cout(c249));
    logic c250;
    adder1 bit250(.a(a[250]), .b(b[250]), .cin(c249), .s(s[250]), .cout(c250));
    logic c251;
    adder1 bit251(.a(a[251]), .b(b[251]), .cin(c250), .s(s[251]), .cout(c251));
    logic c252;
    adder1 bit252(.a(a[252]), .b(b[252]), .cin(c251), .s(s[252]), .cout(c252));
    logic c253;
    adder1 bit253(.a(a[253]), .b(b[253]), .cin(c252), .s(s[253]), .cout(c253));

    // final bit gets carried out
    adder1 bit254(.a(a[254]), .b(b[254]), .cin(c253), .s(s[254]), .cout(cout));
    
endmodule
